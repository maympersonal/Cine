// <auto-generated />
using System;
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(CineContext))]
    [Migration("20240331131901_Inicial")]
    partial class Inicial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ActorPelicula", b =>
                {
                    b.Property<int>("IdA")
                        .HasColumnType("int");

                    b.Property<int>("IdAsIdA")
                        .HasColumnType("int");

                    b.HasKey("IdA", "IdAsIdA");

                    b.ToTable("ActorPelicula");
                });

            modelBuilder.Entity("Backend.Models.Actor", b =>
                {
                    b.Property<int>("IdA")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idA");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdA"));

                    b.Property<string>("NombreA")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NombreA");

                    b.HasKey("IdA");

                    b.ToTable("Actor", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Butaca", b =>
                {
                    b.Property<int>("IdB")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idB");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdB"));

                    b.Property<int>("IdS")
                        .HasColumnType("int")
                        .HasColumnName("idS");

                    b.HasKey("IdB");

                    b.ToTable("Butaca", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Cliente", b =>
                {
                    b.Property<string>("Ci")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("char(11)")
                        .HasColumnName("Ci")
                        .IsFixedLength();

                    b.Property<bool?>("Confiabilidad")
                        .HasColumnType("bit")
                        .HasColumnName("Confiabilidad");

                    b.Property<string>("Correo")
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("Correo");

                    b.HasKey("Ci");

                    b.ToTable("Cliente", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Compra", b =>
                {
                    b.Property<int>("IdP")
                        .HasColumnType("int")
                        .HasColumnName("idP");

                    b.Property<int>("IdS")
                        .HasColumnType("int")
                        .HasColumnName("idS");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha");

                    b.Property<string>("Ci")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("char(11)")
                        .HasColumnName("Ci")
                        .IsFixedLength();

                    b.Property<DateTime>("FechaDeCompra")
                        .HasColumnType("datetime")
                        .HasColumnName("FechaDeCompra");

                    b.Property<int>("IdPg")
                        .HasColumnType("int")
                        .HasColumnName("idPg");

                    b.Property<string>("MedioAd")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("MedioAd");

                    b.Property<string>("Tipo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Tipo");

                    b.HasKey("IdP", "IdS", "Fecha", "Ci")
                        .HasName("PKCompra");

                    b.HasIndex("Ci");

                    b.HasIndex("IdPg");

                    b.ToTable("Compra", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Descuento", b =>
                {
                    b.Property<int>("IdD")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idD");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdD"));

                    b.Property<string>("NombreD")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("NombreD");

                    b.Property<double?>("Porciento")
                        .HasColumnType("float")
                        .HasColumnName("Porciento");

                    b.HasKey("IdD")
                        .HasName("PK_Descuentos");

                    b.ToTable("Descuento", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Efectivo", b =>
                {
                    b.Property<int>("IdPg")
                        .HasColumnType("int")
                        .HasColumnName("idPg");

                    b.Property<decimal?>("CantidadE")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("CantidadE");

                    b.HasKey("IdPg")
                        .HasName("PK__Efectivo__9DB8492F9CA4EC17");

                    b.ToTable("Efectivo", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Genero", b =>
                {
                    b.Property<int>("IdG")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idG");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdG"));

                    b.Property<string>("NombreG")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("NombreG");

                    b.HasKey("IdG");

                    b.ToTable("Genero", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Pago", b =>
                {
                    b.Property<int>("IdPg")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idPg");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPg"));

                    b.HasKey("IdPg");

                    b.ToTable("Pago", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Pelicula", b =>
                {
                    b.Property<int>("IdP")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idP");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdP"));

                    b.Property<int?>("Anno")
                        .HasColumnType("int")
                        .HasColumnName("Anno");

                    b.Property<int?>("Duración")
                        .HasColumnType("int")
                        .HasColumnName("Duración");

                    b.Property<string>("Imagen")
                        .HasColumnType("text")
                        .HasColumnName("Imagen");

                    b.Property<int?>("Nacionalidad")
                        .HasColumnType("int")
                        .HasColumnName("Nacionalidad");

                    b.Property<string>("Sinopsis")
                        .HasColumnType("text")
                        .HasColumnName("Sinopsis");

                    b.Property<string>("Titulo")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Titulo");

                    b.Property<string>("Trailer")
                        .HasColumnType("text")
                        .HasColumnName("Trailer");

                    b.HasKey("IdP");

                    b.ToTable("Pelicula", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Punto", b =>
                {
                    b.Property<int>("IdPg")
                        .HasColumnType("int")
                        .HasColumnName("idPg");

                    b.Property<int?>("Gastados")
                        .HasColumnType("int")
                        .HasColumnName("Gastados");

                    b.HasKey("IdPg")
                        .HasName("PK__Puntos__9DB8492F0CB84D88");

                    b.ToTable("Puntos");
                });

            modelBuilder.Entity("Backend.Models.Sala", b =>
                {
                    b.Property<int>("IdS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idS");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdS"));

                    b.Property<int?>("Capacidad")
                        .HasColumnType("int")
                        .HasColumnName("Capacidad");

                    b.HasKey("IdS");

                    b.ToTable("Sala", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Sesion", b =>
                {
                    b.Property<int>("IdP")
                        .HasColumnType("int")
                        .HasColumnName("idP");

                    b.Property<int>("IdS")
                        .HasColumnType("int")
                        .HasColumnName("idS");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha");

                    b.HasKey("IdP", "IdS", "Fecha")
                        .HasName("PKsesion");

                    b.HasIndex("IdS");

                    b.ToTable("Sesion", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Tarjetum", b =>
                {
                    b.Property<string>("CodigoT")
                        .HasMaxLength(18)
                        .IsUnicode(false)
                        .HasColumnType("varchar(18)")
                        .HasColumnName("codigoT")
                        .IsFixedLength();

                    b.Property<string>("Ci")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("char(11)")
                        .HasColumnName("Ci")
                        .IsFixedLength();

                    b.HasKey("CodigoT")
                        .HasName("PK__Tarjeta__BC7B7B928CA058B7");

                    b.HasIndex("Ci");

                    b.ToTable("Tarjeta");
                });

            modelBuilder.Entity("Backend.Models.Usuario", b =>
                {
                    b.Property<string>("Ci")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("char(11)")
                        .HasColumnName("Ci")
                        .IsFixedLength();

                    b.Property<string>("Apellidos")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Apellidos");

                    b.Property<string>("Codigo")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("Codigo")
                        .IsFixedLength();

                    b.Property<byte[]>("Contrasena")
                        .HasMaxLength(256)
                        .HasColumnType("binary(256)")
                        .HasColumnName("Contrasena")
                        .IsFixedLength();

                    b.Property<string>("NombreS")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NombreS");

                    b.Property<int?>("Puntos")
                        .HasColumnType("int")
                        .HasColumnName("Puntos");

                    b.Property<string>("Rol")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Rol");

                    b.HasKey("Ci")
                        .HasName("PK__Socio__32149A5BACE7E998");

                    b.ToTable("Usuario", (string)null);
                });

            modelBuilder.Entity("Backend.Models.Web", b =>
                {
                    b.Property<int>("IdPg")
                        .HasColumnType("int")
                        .HasColumnName("idPg");

                    b.Property<decimal?>("Cantidad")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("Cantidad");

                    b.Property<string>("CodigoT")
                        .HasMaxLength(18)
                        .IsUnicode(false)
                        .HasColumnType("varchar(18)")
                        .HasColumnName("codigoT")
                        .IsFixedLength();

                    b.HasKey("IdPg")
                        .HasName("PK__Web__9DB8492FA85DDD01");

                    b.HasIndex("CodigoT");

                    b.ToTable("Web", (string)null);
                });

            modelBuilder.Entity("ButacaCompra", b =>
                {
                    b.Property<int>("IdB")
                        .HasColumnType("int");

                    b.Property<int>("IdBsIdB")
                        .HasColumnType("int");

                    b.HasKey("IdB", "IdBsIdB");

                    b.ToTable("ButacaCompra");
                });

            modelBuilder.Entity("ButacasReservada", b =>
                {
                    b.Property<int>("IdP")
                        .HasColumnType("int")
                        .HasColumnName("idP");

                    b.Property<int>("IdS")
                        .HasColumnType("int")
                        .HasColumnName("idS");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha");

                    b.Property<string>("Ci")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("char(11)")
                        .IsFixedLength();

                    b.Property<int>("IdB")
                        .HasColumnType("int")
                        .HasColumnName("idB");

                    b.HasKey("IdP", "IdS", "Fecha", "Ci", "IdB")
                        .HasName("PKReserva");

                    b.HasIndex("IdB");

                    b.ToTable("ButacasReservadas", (string)null);
                });

            modelBuilder.Entity("CompraDescuento", b =>
                {
                    b.Property<int>("IdD")
                        .HasColumnType("int");

                    b.Property<int>("IdDsIdD")
                        .HasColumnType("int");

                    b.HasKey("IdD", "IdDsIdD");

                    b.ToTable("CompraDescuento");
                });

            modelBuilder.Entity("Descontado", b =>
                {
                    b.Property<int>("IdP")
                        .HasColumnType("int")
                        .HasColumnName("idP");

                    b.Property<int>("IdS")
                        .HasColumnType("int")
                        .HasColumnName("idS");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime")
                        .HasColumnName("fecha");

                    b.Property<string>("Ci")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("char(11)")
                        .IsFixedLength();

                    b.Property<int>("IdD")
                        .HasColumnType("int")
                        .HasColumnName("idD");

                    b.HasKey("IdP", "IdS", "Fecha", "Ci", "IdD")
                        .HasName("PKDescontado");

                    b.HasIndex("IdD");

                    b.ToTable("Descontado", (string)null);
                });

            modelBuilder.Entity("Elenco", b =>
                {
                    b.Property<int>("IdP")
                        .HasColumnType("int")
                        .HasColumnName("idP");

                    b.Property<int>("IdA")
                        .HasColumnType("int")
                        .HasColumnName("idA");

                    b.HasKey("IdP", "IdA")
                        .HasName("PKelenco");

                    b.HasIndex("IdA");

                    b.ToTable("Elenco", (string)null);
                });

            modelBuilder.Entity("Genero1", b =>
                {
                    b.Property<int>("IdP")
                        .HasColumnType("int")
                        .HasColumnName("idP");

                    b.Property<int>("IdG")
                        .HasColumnType("int")
                        .HasColumnName("idG");

                    b.HasKey("IdP", "IdG")
                        .HasName("PKgeneros");

                    b.HasIndex("IdG");

                    b.ToTable("Generos", (string)null);
                });

            modelBuilder.Entity("GeneroPelicula", b =>
                {
                    b.Property<int>("IdG")
                        .HasColumnType("int");

                    b.Property<int>("IdGsIdG")
                        .HasColumnType("int");

                    b.HasKey("IdG", "IdGsIdG");

                    b.ToTable("GeneroPelicula");
                });

            modelBuilder.Entity("Backend.Models.Compra", b =>
                {
                    b.HasOne("Backend.Models.Cliente", "CiNavigation")
                        .WithMany("Compras")
                        .HasForeignKey("Ci")
                        .IsRequired()
                        .HasConstraintName("FK__Compra__Ci__0C85DE4D");

                    b.HasOne("Backend.Models.Pago", "IdPgNavigation")
                        .WithMany("Compras")
                        .HasForeignKey("IdPg")
                        .IsRequired()
                        .HasConstraintName("FK__Compra__idPg__0D7A0286");

                    b.HasOne("Backend.Models.Sesion", "Sesion")
                        .WithMany("Compras")
                        .HasForeignKey("IdP", "IdS", "Fecha")
                        .IsRequired()
                        .HasConstraintName("FK__Compra__0E6E26BF");

                    b.Navigation("CiNavigation");

                    b.Navigation("IdPgNavigation");

                    b.Navigation("Sesion");
                });

            modelBuilder.Entity("Backend.Models.Efectivo", b =>
                {
                    b.HasOne("Backend.Models.Pago", "IdPgNavigation")
                        .WithOne("Efectivo")
                        .HasForeignKey("Backend.Models.Efectivo", "IdPg")
                        .IsRequired()
                        .HasConstraintName("FK__Efectivo__idPg__7F2BE32F");

                    b.Navigation("IdPgNavigation");
                });

            modelBuilder.Entity("Backend.Models.Punto", b =>
                {
                    b.HasOne("Backend.Models.Pago", "IdPgNavigation")
                        .WithOne("Punto")
                        .HasForeignKey("Backend.Models.Punto", "IdPg")
                        .IsRequired()
                        .HasConstraintName("FK__Puntos__idPg__7C4F7684");

                    b.Navigation("IdPgNavigation");
                });

            modelBuilder.Entity("Backend.Models.Sesion", b =>
                {
                    b.HasOne("Backend.Models.Pelicula", "IdPNavigation")
                        .WithMany("Sesions")
                        .HasForeignKey("IdP")
                        .IsRequired()
                        .HasConstraintName("FK__Sesion__idP__08B54D69");

                    b.HasOne("Backend.Models.Sala", "IdSNavigation")
                        .WithMany("Sesions")
                        .HasForeignKey("IdS")
                        .IsRequired()
                        .HasConstraintName("FK__Sesion__idS__09A971A2");

                    b.Navigation("IdPNavigation");

                    b.Navigation("IdSNavigation");
                });

            modelBuilder.Entity("Backend.Models.Tarjetum", b =>
                {
                    b.HasOne("Backend.Models.Cliente", "CiNavigation")
                        .WithMany("Tarjeta")
                        .HasForeignKey("Ci")
                        .HasConstraintName("FK__Tarjeta__Ci__6B24EA82");

                    b.Navigation("CiNavigation");
                });

            modelBuilder.Entity("Backend.Models.Usuario", b =>
                {
                    b.HasOne("Backend.Models.Cliente", "CiNavigation")
                        .WithOne("Usuario")
                        .HasForeignKey("Backend.Models.Usuario", "Ci")
                        .IsRequired()
                        .HasConstraintName("FK__Socio__Ci__656C112C");

                    b.Navigation("CiNavigation");
                });

            modelBuilder.Entity("Backend.Models.Web", b =>
                {
                    b.HasOne("Backend.Models.Tarjetum", "CodigoTNavigation")
                        .WithMany("Webs")
                        .HasForeignKey("CodigoT")
                        .HasConstraintName("FK__Web__codigoT__02084FDA");

                    b.HasOne("Backend.Models.Pago", "IdPgNavigation")
                        .WithOne("Web")
                        .HasForeignKey("Backend.Models.Web", "IdPg")
                        .IsRequired()
                        .HasConstraintName("FK__Web__idPg__02FC7413");

                    b.Navigation("CodigoTNavigation");

                    b.Navigation("IdPgNavigation");
                });

            modelBuilder.Entity("ButacasReservada", b =>
                {
                    b.HasOne("Backend.Models.Butaca", null)
                        .WithMany()
                        .HasForeignKey("IdB")
                        .IsRequired()
                        .HasConstraintName("FK__ButacasRese__idB__18EBB532");

                    b.HasOne("Backend.Models.Compra", null)
                        .WithMany()
                        .HasForeignKey("IdP", "IdS", "Fecha", "Ci")
                        .IsRequired()
                        .HasConstraintName("FK__ButacasReservada__19DFD96B");
                });

            modelBuilder.Entity("Descontado", b =>
                {
                    b.HasOne("Backend.Models.Descuento", null)
                        .WithMany()
                        .HasForeignKey("IdD")
                        .IsRequired()
                        .HasConstraintName("FK__Descontado__idD__151B244E");

                    b.HasOne("Backend.Models.Compra", null)
                        .WithMany()
                        .HasForeignKey("IdP", "IdS", "Fecha", "Ci")
                        .IsRequired()
                        .HasConstraintName("FK__Descontado__160F4887");
                });

            modelBuilder.Entity("Elenco", b =>
                {
                    b.HasOne("Backend.Models.Actor", null)
                        .WithMany()
                        .HasForeignKey("IdA")
                        .IsRequired()
                        .HasConstraintName("FK__Elenco__idA__1DB06A4F");

                    b.HasOne("Backend.Models.Pelicula", null)
                        .WithMany()
                        .HasForeignKey("IdP")
                        .IsRequired()
                        .HasConstraintName("FK__Elenco__idP__1CBC4616");
                });

            modelBuilder.Entity("Genero1", b =>
                {
                    b.HasOne("Backend.Models.Genero", null)
                        .WithMany()
                        .HasForeignKey("IdG")
                        .IsRequired()
                        .HasConstraintName("FK__Generos__idG__2180FB33");

                    b.HasOne("Backend.Models.Pelicula", null)
                        .WithMany()
                        .HasForeignKey("IdP")
                        .IsRequired()
                        .HasConstraintName("FK__Generos__idP__208CD6FA");
                });

            modelBuilder.Entity("Backend.Models.Cliente", b =>
                {
                    b.Navigation("Compras");

                    b.Navigation("Tarjeta");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Backend.Models.Pago", b =>
                {
                    b.Navigation("Compras");

                    b.Navigation("Efectivo");

                    b.Navigation("Punto");

                    b.Navigation("Web");
                });

            modelBuilder.Entity("Backend.Models.Pelicula", b =>
                {
                    b.Navigation("Sesions");
                });

            modelBuilder.Entity("Backend.Models.Sala", b =>
                {
                    b.Navigation("Sesions");
                });

            modelBuilder.Entity("Backend.Models.Sesion", b =>
                {
                    b.Navigation("Compras");
                });

            modelBuilder.Entity("Backend.Models.Tarjetum", b =>
                {
                    b.Navigation("Webs");
                });
#pragma warning restore 612, 618
        }
    }
}
